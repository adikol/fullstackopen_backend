{"version":3,"sources":["phonebook.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","notificationMessage","message","length","notificationStyle","color","error","fontSize","background","borderStyle","borderRadius","padding","maringBottom","className","style","Form","props","onSubmit","addorUpdatePersons","value","newName","onChange","addNewName","newNumber","addNewNumber","type","FilterField","searchText","setToSearchText","Results","persons","map","person","name","toUpperCase","includes","number","onClick","handleDelete","App","useState","setPersons","setNewName","setNewNumber","setSearchText","setNotificationMessage","useEffect","phoneBookService","event","target","preventDefault","matchingPerson","filter","window","confirm","personObj","catch","setTimeout","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f05027c3.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst add = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)  \n}\n\nconst deletePerson = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\nexport default { \n  getAll,\n  add,\n  deletePerson,\n  update\n}\n","import React, { useState, useEffect } from 'react'\nimport phoneBookService from '../src/phonebook'\n\nconst Notification = ({ notificationMessage }) => {\n  if (!notificationMessage || !notificationMessage.message || !notificationMessage.message.length) {\n    return null\n  }\n\n  const notificationStyle = {\n    color: notificationMessage.error ? 'red' : 'green',\n    fontSize: 16,\n    background: 'lightgrey',\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    maringBottom: 10\n  }\n\n  return (\n    <div className=\"error\" style={notificationStyle}>\n      {notificationMessage.message}\n    </div>\n  )\n}\n\nconst Form = (props) => {\n  return(\n    <form onSubmit={props.addorUpdatePersons}>\n        <div>\n          name: <input value={props.newName} onChange={props.addNewName} />\n        </div>\n        <div>\n          number:  <input value={props.newNumber} onChange={props.addNewNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst FilterField = (props) => {\n  return(\n    <p>\n      filter shown with: <input value={props.searchText} onChange={props.setToSearchText} />\n    </p>\n  )\n}\n\nconst Results = (props) => {\n  return(\n    <div>\n      {props.persons.map(person => props.persons.length === 0 || (person.name.toUpperCase().includes(props.searchText.toUpperCase()) \n      ? <p key={person.id}>{person.name} {person.number} <button type=\"submit\" onClick={()=> props.handleDelete(person.id)}> delete</button> </p>\n      : null))}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchText, setSearchText ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState({})\n\n  const addNewName = (event) => setNewName(event.target.value)\n  const addNewNumber = (event) => setNewNumber(event.target.value)\n  const setToSearchText = (event) => setSearchText(event.target.value)\n\n  useEffect(() => {\n    phoneBookService\n      .getAll()\n      .then(response => {\n        setPersons(response)\n      })\n  }, [])\n\n  const addorUpdatePersons = (event) => {\n    event.preventDefault()\n    let matchingPerson = persons.filter(person => person.name.toUpperCase() === newName.toUpperCase())\n    if(matchingPerson.length)\n    {\n      if(window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`))\n      {\n        const personObj = {\n          name: newName,\n          number: newNumber,\n          id: matchingPerson[0].id\n        }\n        \n        phoneBookService\n        .update(matchingPerson[0].id, personObj)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== matchingPerson[0].id ? person : response))\n        })\n        .catch(error => {\n          setPersons(persons.filter(person => person.id !== matchingPerson[0].id))\n          setNotificationMessage(\n            {message: `Information of ${newName} has already been removed from server`, error: true}\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        } )\n      }\n    }\n    else\n    {\n      const personObj = {\n        name: newName,\n        number: newNumber,\n        id: persons.length + 1\n      }\n      \n      phoneBookService\n      .add(personObj)\n      .then(response => {\n        setPersons(persons.concat(response))\n      })\n    }\n    setNotificationMessage(\n      {message: `Added ${newName}`, error: false}\n    )\n    setTimeout(() => {\n      setNotificationMessage(null)\n    }, 5000)\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deletePerson = id => {\n    if(window.confirm(`delete ${persons.filter(person => person.id === id)[0].name} ?`))\n    {\n      phoneBookService\n      .deletePerson(id)\n      .then(response => setPersons(persons.filter(person => person.id !== id)))\n      .catch(error => setPersons(persons.filter(person => person.id !== id)))\n    }  \n  }\n\n\n  return (\n   <div>\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notificationMessage={notificationMessage} />\n      <FilterField searchText={searchText} setToSearchText={setToSearchText} />\n      <h3>add a new</h3>\n      <Form addNewName={addNewName} addNewNumber={addNewNumber} addorUpdatePersons={addorUpdatePersons} newName={newName} newNumber={newNumber} />\n      <h3>Numbers</h3>\n      <Results persons={persons} searchText={searchText} handleDelete={deletePerson}/>\n  </div>\n   </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,  document.getElementById('root'))"],"sourceRoot":""}